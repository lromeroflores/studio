# Valores por defecto para el Helm chart de ContractEase

replicaCount: 1

image:
  repository: contract-ease # El nombre de la imagen en tu registry
  pullPolicy: IfNotPresent
  # La etiqueta de la imagen será establecida por el pipeline de CI/CD
  # tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: contract-ease.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []

resources:
  # Se recomienda establecer límites de recursos en producción
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 250m
    memory: 256Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 80

# Variables de entorno para la aplicación
# Los secretos deben ser gestionados por Vault
env:
  PORT: "3000"
  NODE_ENV: "production"

# Configuración para la inyección de secretos de Vault
# Esto asume que estás usando el Vault Agent Injector
# https://www.vaultproject.io/docs/agent/injector
vault:
  enabled: false
  # role: "contract-ease-app" # El rol de Vault que la aplicación usará
  # secretPath: "secret/data/contract-ease" # La ruta del secreto en Vault
  # secretTemplate: |
  #   {{- with secret "secret/data/contract-ease" -}}
  #   export GOOGLE_API_KEY="{{ .Data.data.GOOGLE_API_KEY }}"
  #   {{- end }}
